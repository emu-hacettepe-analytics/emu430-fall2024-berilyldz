```{r}
library(dslabs)
data("polls_us_election_2016")
head(polls_us_election_2016)
head(polls_us_election_2016)
head(polls_us_election_2016, 10)
library(dslabs)
data("polls_us_election_2016")
sum(is.na(polls_us_election_2016))
first_ten_row <- head(polls_us_election_2016, 10)
first_ten_row
number_of_nas <- sum(is.na(polls_us_election_2016))
number_of_nas
ifelse(is.na(polls_us_election_2016)=TRUE, 0, 1)
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Use lapply to replace NA values in each column based on its type
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.character(column) || is.factor(column)) {
# Replace NAs in character or factor columns with first name
column[is.na(column)] <- first_name
}
return(column)
})
)
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Loop through each column to replace NA values
for (col in names(polls_us_election_2016_modified)) {
if (is.numeric(polls_us_election_2016_modified[[col]])) {
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- birth_year
} else if (is.character(polls_us_election_2016_modified[[col]]) || is.factor(polls_us_election_2016_modified[[col]])) {
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- first_name
}
}
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Replace NA values for each column based on its type
for (col in names(polls_us_election_2016_modified)) {
if (is.numeric(polls_us_election_2016_modified[[col]])) {
# Replace NA in numeric columns
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- birth_year
} else if (is.factor(polls_us_election_2016_modified[[col]])) {
# Convert factor to character, replace NA, then convert back to factor
polls_us_election_2016_modified[[col]] <- as.character(polls_us_election_2016_modified[[col]])
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- first_name
polls_us_election_2016_modified[[col]] <- as.factor(polls_us_election_2016_modified[[col]])
} else if (is.character(polls_us_election_2016_modified[[col]])) {
# Replace NA in character columns
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- first_name
}
}
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Replace NA values for each column based on its type
for (col in names(polls_us_election_2016_modified)) {
if (is.numeric(polls_us_election_2016_modified[[col]])) {
# Replace NA in numeric columns
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- birth_year
} else if (is.factor(polls_us_election_2016_modified[[col]])) {
# Convert factor to character, replace NA, then convert back to factor
polls_us_election_2016_modified[[col]] <- as.character(polls_us_election_2016_modified[[col]])
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- first_name
polls_us_election_2016_modified[[col]] <- as.factor(polls_us_election_2016_modified[[col]])
} else if (is.character(polls_us_election_2016_modified[[col]])) {
# Replace NA in character columns
polls_us_election_2016_modified[[col]][is.na(polls_us_election_2016_modified[[col]])] <- first_name
}
}
polls_us_election_2016_modified
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Replace NA values for each column based on its type
# Use lapply to replace NA values based on column type
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.factor(column) || is.character(column)) {
# Convert factor to character if necessary, replace NAs with first name
column <- as.character(column)
column[is.na(column)] <- first_name
# Optionally, convert back to factor
column <- as.factor(column)
}
return(column)
})
)
polls_us_election_2016_modified
df1 <- data.frame(A = c(1, 2, 3), B = c(4, 5, 6))
df2 <- data.frame(A = c(7, 8, 9), B = c(10, 11, 12))
data_frames <- list(df1, df2)
data_frames
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Define the replacement function
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.factor(column) || is.character(column)) {
# Convert factor to character if necessary, replace NAs with first name
column <- as.character(column)
column[is.na(column)] <- first_name
# Optionally, convert back to factor
column <- as.factor(column)
}
return(column)
}
# Apply the function to each column using lapply
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, replace_na)
)
polls_us_election_2016_modified
column[is.na(column)] <- birth_year
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)]
# Define the replacement function
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.factor(column) || is.character(column)) {
# Convert factor to character if necessary, replace NAs with first name
column <- as.character(column)
column[is.na(column)] <- first_name
# Optionally, convert back to factor
column <- as.factor(column)
}
return(column)
}
library(dslabs)
data("polls_us_election_2016")
first_ten_row <- head(polls_us_election_2016, 10)
first_ten_row
number_of_nas <- sum(is.na(polls_us_election_2016))
number_of_nas
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Define the replacement function
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.factor(column) || is.character(column)) {
# Convert factor to character if necessary, replace NAs with first name
column <- as.character(column)
column[is.na(column)] <- first_name
# Optionally, convert back to factor
column <- as.factor(column)
}
return(column)
}
# Apply the function to each column using lapply
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, replace_na)
)
polls_us_election_2016_modified
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Define the replacement function
replace_na <- function(column) {
if (is.numeric(column)) {
# Replace NAs in numeric columns with birth year
column[is.na(column)] <- birth_year
} else if (is.factor(column) || is.character(column)) {
# Convert factor to character if necessary, replace NAs with first name
column <- as.character(column)
column[is.na(column)] <- first_name
# Optionally, convert back to factor
column <- as.factor(column)
}
return(column)
}
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Define the replacement function
replace_na <- function(x) {
if (is.numeric(x)) {
# Replace NAs in numeric xs with birth year
x[is.na(x)] <- birth_year
} else if (is.factor(x)) {
# Convert factor to character if necessary, replace NAs with first name
x <- as.character(x)
x[is.na(x)] <- first_name
# Optionally, convert back to factor
x <- as.factor(x)
} else if (is.character(column)) {
# If it's already a character column, just replace NAs
column[is.na(column)] <- first_name
}
return(x)
}
# Apply the function to each x using lapply
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, replace_na)
)
#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
#Define replacements
birth_year <- 2002
first_name <- "Beril"
# Define the replacement function
replace_na <- function(x) {
if (is.numeric(x)) {
# Replace NAs in numeric xs with birth year
x[is.na(x)] <- birth_year
} else if (is.factor(x)) {
# Convert factor to character if necessary, replace NAs with first name
x <- as.character(x)
x[is.na(x)] <- first_name
# Optionally, convert back to factor
x <- as.factor(x)
} else if (is.character(x)) {
# If it's already a character, just replace NAs
x[is.na(x)] <- first_name
}
return(x)
}
# Apply the function to each x using lapply
polls_us_election_2016_modified <- as.data.frame(
lapply(polls_us_election_2016, replace_na)
)
polls_us_election_2016_modified
load("C:/Users/beril/Documents/GitHub/emu430-fall2024-berilyldz/.RData")
load("C:/Users/beril/Documents/GitHub/emu430-fall2024-berilyldz/.RData")
