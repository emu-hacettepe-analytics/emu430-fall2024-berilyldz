---

---
title: "Assignment 1"
---

# Assignment 1

My first assignment has two parts.

## (a)

## (b)

-   Import the “polls_us_election_2016” data set from the dslabs package.

```{r}

library(dslabs)
data("polls_us_election_2016")
```

-   Display the first 10 rows of the data set on your web page.

```{r}

first_ten_row <- head(polls_us_election_2016, 10)
first_ten_row
```

-   Calculate and display the total number of NA values in the entire data set.

```{r}

number_of_nas <- sum(is.na(polls_us_election_2016))
number_of_nas
```

-   Replace all NA values in the “polls_us_election_2016” data set as follows: For numeric xs, replace NA values with your birth year. For character or factor xs, replace NA values with your first name. Store the modified data set as a new object.

```{r}

#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016

#Define replacements
birth_year <- 2002
first_name <- "Beril"

# Define the replacement function
replace_na <- function(x) {
  if (is.numeric(x)) {
    # Replace NAs in numeric xs with birth year
    x[is.na(x)] <- birth_year
  } else if (is.factor(x)) {
    # Convert factor to character if necessary, replace NAs with first name
    x <- as.character(x)
    x[is.na(x)] <- first_name
    # Optionally, convert back to factor
    x <- as.factor(x)
  } else if (is.character(x)) {
    # If it's already a character, just replace NAs
    x[is.na(x)] <- first_name
  }
  return(x)
}

# Apply the function to each x using lapply
polls_us_election_2016_modified <- as.data.frame(
  lapply(polls_us_election_2016, replace_na)
)

polls_us_election_2016_modified
```

```{r}

#Creata a copy for the modified dataset
polls_us_election_2016_modified <- polls_us_election_2016
```

This line creates a copy of the dataset, so the original dataset will not be affected.

```{r}

#Define replacements
birth_year <- 2002
first_name <- "Beril"
```

These lines define the replacement values. If a value is missing in a numeric column, it will be replaced with 2002. If a value is missing in a character column, it will be replaced with "Beril".

```{r}

# Define the replacement function
replace_na <- function(x) {
  if (is.numeric(x)) {
    # Replace NAs in numeric xs with birth year
    x[is.na(x)] <- birth_year
  } else if (is.factor(x)) {
    # Convert factor to character if necessary, replace NAs with first name
    x <- as.character(x)
    x[is.na(x)] <- first_name
    # Optionally, convert back to factor
    x <- as.factor(x)
  } else if (is.character(column)) {
    # If it's already a character column, just replace NAs
    column[is.na(column)] <- first_name
  }
  return(x)
}
```

This function replaces the NA values with the appropriate variables. The if condition checks if the column is numeric. If it is numeric, the function evaluates and returns a logical value. If the value is TRUE (which corresponds to NA), it replaces the NA with the *birth_year*.

The else if part checks if the column is a factor. If it is, the code inside the block is executed. Typically, factors and characters need to be treated in a similar way when manipulating categorical data. The first step is to convert all factor values to characters using the *as.character* function. Then, the NA values are replaced with *first_name* as done previously. After replacing the NA values, we can convert the column back to a factor using *as.factor()* if needed.

If the column is already of type character, it is handled similarly to a factor. The NA values are replaced with *first_name.*

```{r}

# Apply the function to each x using lapply
polls_us_election_2016_modified <- as.data.frame(
  lapply(polls_us_election_2016, replace_na)
)
```

The *lapply()* function is used to apply the replacement function to each column of the *polls_us_election_2016_modified* data frame. Afterward, it is converted back into a data frame using the *as.data.frame()* function.
